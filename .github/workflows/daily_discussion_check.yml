name: Daily Discussion Check

on:
  workflow_dispatch: # Allow manual triggering
  schedule:
    - cron: "0 1 * * *" # Run daily at 1 AM UTC

permissions:
  discussions: read # Need permission to read discussions
  contents: write # Need permission to write/commit preference files

jobs:
  check_discussions:
    name: Check Recent Discussion Updates and Update Preferences
    runs-on: ubuntu-latest
    outputs:
      updated_files: ${{ steps.update_prefs.outputs.updated_files }}
    steps:
      - name: "☁️ Checkout repository"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install polars
        run: pip install polars

      - name: "🔧 Install jq"
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: "📅 Calculate date for the last 24 hours"
        id: date
        run: echo "since=$(date -u -d '1 day ago' '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: "📄 Generate Paper Info Map"
        id: generate_paper_info
        run: |
          python recommend_system/script/extract_paper_info.py
          echo "Paper info CSV generated at data/summarized_paper.csv"

      - name: "🔍 Fetch recent discussions and reactions"
        id: fetch_discussions
        env:
          GH_TOKEN: ${{ github.token }} # Token needed for gh api call
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          gh api graphql -f query=' 
            query($repoOwner: String!, $repoName: String!) {
              repository(owner: $repoOwner, name: $repoName) {
                discussions(
                  last: 50, # Fetch last 50 updated, filter by date below
                  orderBy: {field: UPDATED_AT, direction: DESC}
                ) {
                  nodes {
                    id
                    title
                    updatedAt
                    url
                    reactions(first: 100) {
                      nodes {
                        content
                        user {
                          login
                        }
                      }
                    }
                  }
                }
              }
            }' -f repoOwner="$REPO_OWNER" -f repoName="$REPO_NAME" > discussions.json

          echo "Fetched discussions data saved to discussions.json"
          echo "--- Raw discussions.json content (first 500 chars) ---"
          head -c 500 discussions.json
          echo "\n------------------------------------------------------"

      - name: "📝 Process discussions and extract relevant reactions (DEBUG)"
        id: process_reactions
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          SINCE_DATE: ${{ steps.date.outputs.since }}
        run: |
          echo "Processing discussions updated since $SINCE_DATE..."
          echo "Repository Owner: $REPO_OWNER"
          
          # DEBUG: Log intermediate objects before final extraction
          echo "--- Intermediate Processed Discussions (JSON) ---"
          jq --arg since "$SINCE_DATE" --arg owner "$REPO_OWNER" -c '
            .data.repository.discussions.nodes[] | 
            select(.updatedAt >= $since) | 
            {
              original_title: .title,
              updated_at: .updatedAt,
              # Attempt slug extraction safely
              potential_slug: (if .title and (.title | type == "string") and (.title | test("^paper_machine/papers/")) then 
                                 (.title | sub("^paper_machine/papers/"; "") | sub("/$"; "")) 
                              else 
                                 null 
                              end),
              owner_reactions: [.reactions.nodes[] | select(.user.login == $owner and (.content == "THUMBS_UP" or .content == "THUMBS_DOWN"))]
            } | 
            select(.owner_reactions | length > 0) # Only keep discussions with relevant owner reactions
          ' discussions.json > intermediate_debug.log
          cat intermediate_debug.log
          echo "\n---------------------------------------------------"

          # Original extraction logic, now safer
          echo "--- Final Extracted Reactions (TSV) ---"
          jq --arg since "$SINCE_DATE" --arg owner "$REPO_OWNER" -r '
            .data.repository.discussions.nodes[] | 
            select(.updatedAt >= $since) | 
            {
              # Use safe slug extraction
              slug: (if .title and (.title | type == "string") and (.title | test("^paper_machine/papers/")) then 
                        (.title | sub("^paper_machine/papers/"; "") | sub("/$"; "")) 
                     else 
                        null 
                     end),
              reactions: [.reactions.nodes[] | select(.user.login == $owner and (.content == "THUMBS_UP" or .content == "THUMBS_DOWN"))]
            } | 
            # Ensure slug is not null AND there are reactions
            select(.slug != null and (.reactions | length > 0)) | 
            .reactions[] | "\(.slug)\t\(.content)"
          ' discussions.json > reactions.tsv
          
          echo "Relevant reactions extracted to reactions.tsv:"
          cat -v reactions.tsv

      - name: "🔄 Update Preference Files"
        id: update_prefs
        run: |
          # Check if reactions.tsv is empty before running the script
          if [ ! -s reactions.tsv ]; then
            echo "reactions.tsv is empty. No preferences to update."
            echo "updated_files=" >> $GITHUB_OUTPUT # Ensure output is empty
          else
            output=$(python recommend_system/script/update_preferences.py reactions.tsv data/summarized_paper.csv)
            echo "$output"
            
            # Extract the list of updated files from the script's output
            files=$(echo "$output" | awk '/<<<UPDATED_FILES_START>>>/{flag=1; next} /<<<UPDATED_FILES_END>>>/{flag=0} flag')
            echo "Extracted updated files:"
            echo "$files"
            
            # Set the output variable
            files_list=$(echo "$files" | paste -sd ' ' -)
            echo "updated_files=$files_list" >> $GITHUB_OUTPUT
          fi
          
      - name: "💾 Commit and Push Preference Changes"
        if: steps.update_prefs.outputs.updated_files != ''
        run: |
          echo "Updated files to commit: ${{ steps.update_prefs.outputs.updated_files }}"
          # Configure git user as specified
          git config --global user.email "lyk-boya@outlook.com"
          git config --global user.name "GitHub Action"
          
          # Add only the specific files reported as updated by the script
          # Use xargs to handle potential list of files safely
          echo "${{ steps.update_prefs.outputs.updated_files }}" | xargs git add
          
          # Check if there are staged changes before committing
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update preferences from discussion reactions"
            git push
            echo "Preference changes committed and pushed."
          fi
        # Removed explicit GITHUB_TOKEN env var

      - name: Clean up temporary files
        if: always() # Always run cleanup
        run: rm -f discussions.json reactions.tsv intermediate_debug.log 